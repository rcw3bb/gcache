import java.nio.file.Paths

plugins {
    id "org.gosu-lang.gosu" version "0.3.10"
    id "com.bmuschko.nexus" version "2.3.1"
    id "io.codearte.nexus-staging" version "0.21.1"
}

group 'xyz.ronella.gosu'
version '1.0.0'

repositories {
    maven {
        url 'https://repo.ronella.xyz/artifactory/java-central/'
        credentials {
            username "${artifactoryUsername}"
            password "${artifactoryPassword}"
        }
    }
}

modifyPom {
    project {
        name 'GCache'
        description 'A simple gosu implementation of concurrent LRU Map.'
        url 'https://github.com/rcw3bb/gcache'
        inceptionYear '2020'

        scm {
            url 'https://github.com/rcw3bb/gcache'
            connection 'https://github.com/rcw3bb/gcache.git'
            developerConnection 'https://github.com/rcw3bb/gcache.git'
        }

        licenses {
            license {
                name 'MIT License'
                url 'https://github.com/rcw3bb/gcache/blob/master/LICENSE.md'
                distribution 'repo'
            }
        }

        developers {
            developer {
                id 'rcw3bb'
                name 'Ronaldo Webb'
                email 'ronaldo.c.webb@gmail.com'
            }
        }
    }
}

extraArchive {
    sources = true
    tests = true
    javadoc = true
}

nexus {
    sign = true
    repositoryUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
    snapshotRepositoryUrl = 'https://oss.sonatype.org/content/repositories/snapshots'
}

nexusStaging {
    stagingProfileId = "33650220e7857c"
}

dependencies {
    compile group: 'org.gosu-lang.gosu', name: 'gosu-core', version: '1.13.29'
    testCompile group: 'org.gosu-lang.gosu', name: 'gosu-test', version: '1.13.29'
}

task preparePackage(dependsOn: [build]) {
    doLast {
        def srcDir = sourceSets.main.gosu.sourceDirectories.asPath
        def destDir = Paths.get(buildDir.absolutePath, "gosu")

        copy {
            from srcDir
            into destDir
        }
    }
}

task jarGosu(dependsOn: [jar]) {
    doLast {
        def srcDir = Paths.get(buildDir.absolutePath, "gosu")
        def jarFile = "${project.name}-${version}-gosu.jar"
        def outputFile = Paths.get(buildDir.absolutePath, "gosu-libs", jarFile)

        ant.zip(destfile: outputFile) {
            fileset(dir: srcDir)
        }
    }
}

compileGosu.finalizedBy(preparePackage)
jar.finalizedBy(jarGosu)
